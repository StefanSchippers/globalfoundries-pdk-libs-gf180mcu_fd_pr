################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if BEOL
    #================================================
    #----------------------via4----------------------
    #================================================

    # Rule V4.1: Min/max via4 size . is 0.26µm
    logger.info("Executing rule V4.1")
    V41_l1 = via4.edges.without_length(0.26.um).extended(0, 0, 0.001, 0.001)
    V41_l1.output("V4.1", "V4.1 : Min/max via4 size . : 0.26µm")
    V41_l1.forget

    # Rule V4.2a: min. via4 spacing is 0.26µm
    logger.info("Executing rule V4.2a")
    V42a_l1  = via4.space(0.26.um, euclidian)
    V42a_l1.output("V4.2a", "V4.2a : min. via4 spacing : 0.26µm")
    V42a_l1.forget

   
    # Rule V4.2b: via4 Space in 4x4 or larger via4 array is 0.36µm
    logger.info("Executing rule V4.2b")
    poss_4_4_via4 = via4.sized(0.18, "square_limit").merged.sized(-0.18, "square_limit")
    via4_4x4_loc = poss_4_4_via4.not_interacting(poss_4_4_via4.edges.with_length(nil, 2.115))
    selected_via4 = via4.interacting(via4_4x4_loc)
    via4b_l1  = selected_via4.space(0.36.um, euclidian)
    via4b_l1.output("V4.2b", "V4.2b : via4 Space in 4x4 or larger via4 array : 0.36µm")
    via4b_l1.forget
    poss_4_4_via4.forget
    via4_4x4_loc.forget
    selected_via4.forget

    # Rule V4.3a: metal4  overlap of via4.
    logger.info("Executing rule V4.3a")
    V43a_l1 = via4.not(metal4)
    V43a_l2 = metal4.enclosing(via4, 0.01.um, euclidian).polygons(0.001)
    V43a_l = V43a_l1.or(V43a_l2)
    V43a_l1.output("V4.3a", "V4.3a : metal4 overlap of via4 >= 0.01")
    V43a_l1.forget
    V43a_l2.forget
    V43a_l.forget
    

    # rule V4.3b is not a DRC check
    # Rule V4.3c: metal4 (< 0.34um) end-of-line overlap. is 0.06µm
    logger.info("Executing rule V4.3c")
    V4p3c_cond = metal4.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
    V4p3c_eol = metal4.edges.with_length(nil, 0.34.um).interacting(V4p3c_cond.first_edges).interacting(V4p3c_cond.second_edges).not(V4p3c_cond.first_edges).not(V4p3c_cond.second_edges)
    V4p3c_eol_extended_in = V4p3c_eol.extended_in(0.06.um - 2.dbu)
    V4p3c_l1 = via4.interacting(V4p3c_eol_extended_in)
    V4p3c_l1.output("V4.3c", "V4.3c : metal4 (< 0.34um) end-of-line overlap. : 0.06µm")
    V4p3c_l1.forget
    V4p3c_cond.forget
    V4p3c_eol.forget
    V4p3c_eol_extended_in.forget
        
    logger.info("Executing rule V4.3d")
    via4_3d_cond_metal = metal4.enclosing(via4, 0.04.um, projection).edges.interacting(via4)
    via4_3d_check_space = via4.interacting(via4_3d_cond_metal).edges
    via4_3d_check_corner = via4_3d_cond_metal.extended_in(0.002.um)
    via4_3d_check = via4_3d_check_space.interacting(via4_3d_check_corner).not(via4_3d_cond_metal)
    via4_cond_corner = via4_3d_cond_metal.width(0.002.um, angle_limit(135)).polygons
    via4_3d_check_ext = via4_3d_check.extended_out(0.06.um - 1.dbu)
    bad_ext = via4_3d_check_ext.interacting(via4_3d_check_ext.not(metal4))
    via4_3d_l1 = via4.interacting(bad_ext)
    via4_3d_l2 = via4.interacting(via4_cond_corner)
    via4_3d_l = via4_3d_l1.or(via4_3d_l2)
    via4_3d_l.output("V4.3d", "V4.3d : If metal4 overlap via4 by < 0.04um on one side, adjacent metal4 edges overlap. : 0.06µm")
    via4_3d_l.forget
    via4_3d_l2.forget
    via4_3d_l1.forget
    bad_ext.forget
    via4_cond_corner.forget
    via4_3d_check_ext.forget
    via4_3d_check.forget
    via4_3d_cond_metal.forget

    # rule V4.3e is not a DRC check

    # Rule V4.4a: metal5 overlap of via4.
    logger.info("Executing rule V4.4a")
    via4_4a_l1 = metal5.enclosing(via4, 0.01.um, euclidian).polygons(0.001)
    via4_4a_l2 = via4.not(metal5)
    via4_4a_l = via4_4a_l1.or(via4_4a_l2)
    via4_4a_l.output("V4.4a", "V4.4a : metal5 overlap of via4 >= 0.01 um")
    via4_4a_l1.forget
    via4_4a_l2.forget
    via4_4a_l.forget

    # Rule V4.4b: metal5 (< 0.34um) end-of-line overlap. is 0.06µm
    logger.info("Executing rule V4.4b")
    V4p4b_cond = metal5.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
    V4p4b_eol = metal5.edges.with_length(nil, 0.34.um).interacting(V4p4b_cond.first_edges).interacting(V4p4b_cond.second_edges).not(V4p4b_cond.first_edges).not(V4p4b_cond.second_edges)
    V4p4b_eol_extended_in = V4p4b_eol.extended_in(0.06.um - 2.dbu)
    V4p4b_l1 = via4.interacting(V4p4b_eol_extended_in)
    V4p4b_l1.output("V4.4b", "V4.4b : metal5 (< 0.34um) end-of-line overlap. : 0.06µm")
    V4p4b_l1.forget
    V4p4b_cond.forget
    V4p4b_eol.forget
    V4p4b_eol_extended_in.forget
        
    logger.info("Executing rule V4.4c")
    via4_4c_cond_metal = metal5.enclosing(via4, 0.04.um, projection).edges.interacting(via4)
    via4_4c_check_space = via4.interacting(via4_4c_cond_metal).edges
    via4_4c_check_corner = via4_4c_cond_metal.extended_in(0.002.um)
    via4_4c_check = via4_4c_check_space.interacting(via4_4c_check_corner).not(via4_4c_cond_metal)
    via4_cond_corner = via4_4c_cond_metal.width(0.002.um, angle_limit(135)).polygons
    via4_4c_check_ext = via4_4c_check.extended_out(0.06.um - 1.dbu)
    bad_ext = via4_4c_check_ext.interacting(via4_4c_check_ext.not(metal5))
    via4_4c_l1 = via4.interacting(bad_ext)
    via4_4c_l2 = via4.interacting(via4_cond_corner)
    via4_4c_l = via4_4c_l1.or(via4_4c_l2)
    via4_4c_l.output("V4.4c", "V4.4c : If metal5 overlap via4 by < 0.04um on one side, adjacent metal5 edges overlap. : 0.06µm")
    via4_4c_l.forget
    via4_4c_l2.forget
    via4_4c_l1.forget
    bad_ext.forget
    via4_cond_corner.forget
    via4_4c_check_ext.forget
    via4_4c_check.forget
    via4_4c_cond_metal.forget
    via4_4c_check_space.forget
    via4_4c_check_corner.forget
    
end #BEOL
